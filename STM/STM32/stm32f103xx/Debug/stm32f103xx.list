
stm32f103xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000418  00001418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00001418  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00001418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000418  00001418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000414  08000414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000418  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000418  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000601  00000000  00000000  00001441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000022b  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004c  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001173  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000009ee  00000000  00000000  00002ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004290  00000000  00000000  00003895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00007b25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e4  00000000  00000000  00007b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00007c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003f8 	.word	0x080003f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003f8 	.word	0x080003f8

08000170 <GPIO_Init>:


#include "gpiox_driver.h"

GPIO_Handle_t GPIO_Init(GPIO_TypeDef* Instance, uint8_t Pin, GPIO_Mode_t Mode, GPIO_Speed_t Speed, GPIO_Pull_t Pull)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	460b      	mov	r3, r1
 8000180:	71fb      	strb	r3, [r7, #7]
 8000182:	4613      	mov	r3, r2
 8000184:	71bb      	strb	r3, [r7, #6]
    GPIO_Handle_t hGPIO;

    // Cấu hình Instance và Pin
    hGPIO.Instance = Instance;
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	617b      	str	r3, [r7, #20]
    hGPIO.GPIO_Config.Pin = Pin;
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	747b      	strb	r3, [r7, #17]
    hGPIO.GPIO_Config.Mode = Mode;
 800018e:	79bb      	ldrb	r3, [r7, #6]
 8000190:	743b      	strb	r3, [r7, #16]
    hGPIO.GPIO_Config.Speed = Speed;
 8000192:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000196:	74bb      	strb	r3, [r7, #18]
    hGPIO.GPIO_Config.Pull = Pull;
 8000198:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800019c:	74fb      	strb	r3, [r7, #19]

    // Enable clock cho GPIO
    if (Instance == GPIOA) GPIOA_EN_CLOCK();
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	4a4f      	ldr	r2, [pc, #316]	@ (80002e0 <GPIO_Init+0x170>)
 80001a2:	4293      	cmp	r3, r2
 80001a4:	d106      	bne.n	80001b4 <GPIO_Init+0x44>
 80001a6:	4b4f      	ldr	r3, [pc, #316]	@ (80002e4 <GPIO_Init+0x174>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a4e      	ldr	r2, [pc, #312]	@ (80002e4 <GPIO_Init+0x174>)
 80001ac:	f043 0304 	orr.w	r3, r3, #4
 80001b0:	6193      	str	r3, [r2, #24]
 80001b2:	e040      	b.n	8000236 <GPIO_Init+0xc6>
    else if (Instance == GPIOB) GPIOB_EN_CLOCK();
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	4a4c      	ldr	r2, [pc, #304]	@ (80002e8 <GPIO_Init+0x178>)
 80001b8:	4293      	cmp	r3, r2
 80001ba:	d106      	bne.n	80001ca <GPIO_Init+0x5a>
 80001bc:	4b49      	ldr	r3, [pc, #292]	@ (80002e4 <GPIO_Init+0x174>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a48      	ldr	r2, [pc, #288]	@ (80002e4 <GPIO_Init+0x174>)
 80001c2:	f043 0308 	orr.w	r3, r3, #8
 80001c6:	6193      	str	r3, [r2, #24]
 80001c8:	e035      	b.n	8000236 <GPIO_Init+0xc6>
    else if (Instance == GPIOC) GPIOC_EN_CLOCK();
 80001ca:	68bb      	ldr	r3, [r7, #8]
 80001cc:	4a47      	ldr	r2, [pc, #284]	@ (80002ec <GPIO_Init+0x17c>)
 80001ce:	4293      	cmp	r3, r2
 80001d0:	d106      	bne.n	80001e0 <GPIO_Init+0x70>
 80001d2:	4b44      	ldr	r3, [pc, #272]	@ (80002e4 <GPIO_Init+0x174>)
 80001d4:	699b      	ldr	r3, [r3, #24]
 80001d6:	4a43      	ldr	r2, [pc, #268]	@ (80002e4 <GPIO_Init+0x174>)
 80001d8:	f043 0310 	orr.w	r3, r3, #16
 80001dc:	6193      	str	r3, [r2, #24]
 80001de:	e02a      	b.n	8000236 <GPIO_Init+0xc6>
    else if (Instance == GPIOD) GPIOD_EN_CLOCK();
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	4a43      	ldr	r2, [pc, #268]	@ (80002f0 <GPIO_Init+0x180>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d106      	bne.n	80001f6 <GPIO_Init+0x86>
 80001e8:	4b3e      	ldr	r3, [pc, #248]	@ (80002e4 <GPIO_Init+0x174>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a3d      	ldr	r2, [pc, #244]	@ (80002e4 <GPIO_Init+0x174>)
 80001ee:	f043 0320 	orr.w	r3, r3, #32
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	e01f      	b.n	8000236 <GPIO_Init+0xc6>
    else if (Instance == GPIOE) GPIOE_EN_CLOCK();
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	4a3e      	ldr	r2, [pc, #248]	@ (80002f4 <GPIO_Init+0x184>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d106      	bne.n	800020c <GPIO_Init+0x9c>
 80001fe:	4b39      	ldr	r3, [pc, #228]	@ (80002e4 <GPIO_Init+0x174>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	4a38      	ldr	r2, [pc, #224]	@ (80002e4 <GPIO_Init+0x174>)
 8000204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000208:	6193      	str	r3, [r2, #24]
 800020a:	e014      	b.n	8000236 <GPIO_Init+0xc6>
    else if (Instance == GPIOF) GPIOF_EN_CLOCK();
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	4a3a      	ldr	r2, [pc, #232]	@ (80002f8 <GPIO_Init+0x188>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d106      	bne.n	8000222 <GPIO_Init+0xb2>
 8000214:	4b33      	ldr	r3, [pc, #204]	@ (80002e4 <GPIO_Init+0x174>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a32      	ldr	r2, [pc, #200]	@ (80002e4 <GPIO_Init+0x174>)
 800021a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800021e:	6193      	str	r3, [r2, #24]
 8000220:	e009      	b.n	8000236 <GPIO_Init+0xc6>
    else if (Instance == GPIOG) GPIOG_EN_CLOCK();
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	4a35      	ldr	r2, [pc, #212]	@ (80002fc <GPIO_Init+0x18c>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d105      	bne.n	8000236 <GPIO_Init+0xc6>
 800022a:	4b2e      	ldr	r3, [pc, #184]	@ (80002e4 <GPIO_Init+0x174>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a2d      	ldr	r2, [pc, #180]	@ (80002e4 <GPIO_Init+0x174>)
 8000230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000234:	6193      	str	r3, [r2, #24]


    // Xác định chế độ (Mode) cho pin
    if (Mode == GPIO_MODE_INPUT)
 8000236:	79bb      	ldrb	r3, [r7, #6]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d043      	beq.n	80002c4 <GPIO_Init+0x154>
    {

    }
    else if (Mode == GPIO_MODE_OUTPUT)
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	2b01      	cmp	r3, #1
 8000240:	d140      	bne.n	80002c4 <GPIO_Init+0x154>
    {

    	if (Pin < 8)
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	2b07      	cmp	r3, #7
 8000246:	d817      	bhi.n	8000278 <GPIO_Init+0x108>
    	    {
    			Instance->CRL |= (Speed << (Pin * 4));  // Set new speed bits
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8000250:	79fa      	ldrb	r2, [r7, #7]
 8000252:	0092      	lsls	r2, r2, #2
 8000254:	fa01 f202 	lsl.w	r2, r1, r2
 8000258:	431a      	orrs	r2, r3
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	601a      	str	r2, [r3, #0]
    	        Instance->CRL |= (Pull << (Pin * 4 + 2));  // Set new speed bits
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000266:	79fa      	ldrb	r2, [r7, #7]
 8000268:	0092      	lsls	r2, r2, #2
 800026a:	3202      	adds	r2, #2
 800026c:	fa01 f202 	lsl.w	r2, r1, r2
 8000270:	431a      	orrs	r2, r3
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	e025      	b.n	80002c4 <GPIO_Init+0x154>

    	    }
    	    else
    	    {
    	        // Pin từ 8 đến 15 sử dụng CRH
    	        Instance->CRH |= (Speed << ((Pin - 8) * 4));   // Set new mode bits
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	3a08      	subs	r2, #8
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	fa01 f202 	lsl.w	r2, r1, r2
 800028a:	431a      	orrs	r2, r3
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	605a      	str	r2, [r3, #4]
    	        Instance->CRH &= ~(1 << ((Pin - 8) * 4 + 2));  // Set new speed bits
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	79fa      	ldrb	r2, [r7, #7]
 8000296:	3a08      	subs	r2, #8
 8000298:	0092      	lsls	r2, r2, #2
 800029a:	3202      	adds	r2, #2
 800029c:	2101      	movs	r1, #1
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	43d2      	mvns	r2, r2
 80002a4:	401a      	ands	r2, r3
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	605a      	str	r2, [r3, #4]

    	        Instance->CRH |= (Pull << ((Pin - 8) * 4 + 2));  // Set new speed bits
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80002b2:	79fa      	ldrb	r2, [r7, #7]
 80002b4:	3a08      	subs	r2, #8
 80002b6:	0092      	lsls	r2, r2, #2
 80002b8:	3202      	adds	r2, #2
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	431a      	orrs	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	605a      	str	r2, [r3, #4]

    	    }
    }

    // Trả về GPIO Handle
    return hGPIO;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	461a      	mov	r2, r3
 80002c8:	f107 0310 	add.w	r3, r7, #16
 80002cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002d0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80002d4:	68f8      	ldr	r0, [r7, #12]
 80002d6:	371c      	adds	r7, #28
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40010800 	.word	0x40010800
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	40011000 	.word	0x40011000
 80002f0:	40011400 	.word	0x40011400
 80002f4:	40011800 	.word	0x40011800
 80002f8:	40011c00 	.word	0x40011c00
 80002fc:	40012000 	.word	0x40012000

08000300 <GPIO_SetPin>:
void GPIO_ClearPin(GPIO_Handle_t *xGPIO){
	xGPIO->Instance->ODR |= (1 << xGPIO->GPIO_Config.Pin);  // Enable pull-up

}

void GPIO_SetPin(GPIO_Handle_t *xGPIO){
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	xGPIO->Instance->ODR &= ~(1 << xGPIO->GPIO_Config.Pin);  // Enable pull-up
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	68da      	ldr	r2, [r3, #12]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	785b      	ldrb	r3, [r3, #1]
 8000312:	4619      	mov	r1, r3
 8000314:	2301      	movs	r3, #1
 8000316:	408b      	lsls	r3, r1
 8000318:	43db      	mvns	r3, r3
 800031a:	4619      	mov	r1, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	400a      	ands	r2, r1
 8000322:	60da      	str	r2, [r3, #12]

}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
	...

08000330 <main>:

#include <stdint.h>
#include <stm32f103xx.h>
#include <gpiox_driver.h>
int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af02      	add	r7, sp, #8
GPIO_Handle_t PC13 = GPIO_Init(GPIOC, 13, GPIO_MODE_OUTPUT, GPIO_SPEED_LOW, GPIO_PUSH_PULL);
 8000336:	4638      	mov	r0, r7
 8000338:	2300      	movs	r3, #0
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	2302      	movs	r3, #2
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	2301      	movs	r3, #1
 8000342:	220d      	movs	r2, #13
 8000344:	4904      	ldr	r1, [pc, #16]	@ (8000358 <main+0x28>)
 8000346:	f7ff ff13 	bl	8000170 <GPIO_Init>
		GPIO_SetPin(&PC13);
 800034a:	463b      	mov	r3, r7
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ffd7 	bl	8000300 <GPIO_SetPin>
    /* Loop forever */
	for(;;)
 8000352:	bf00      	nop
 8000354:	e7fd      	b.n	8000352 <main+0x22>
 8000356:	bf00      	nop
 8000358:	40011000 	.word	0x40011000

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	@ (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	@ (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	@ (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	@ (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ffcf 	bl	8000330 <main>

08000392 <LoopForever>:

LoopForever:
  b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	2000001c 	.word	0x2000001c

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	2600      	movs	r6, #0
 80003b4:	4d0c      	ldr	r5, [pc, #48]	@ (80003e8 <__libc_init_array+0x38>)
 80003b6:	4c0d      	ldr	r4, [pc, #52]	@ (80003ec <__libc_init_array+0x3c>)
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	f000 f81a 	bl	80003f8 <_init>
 80003c4:	2600      	movs	r6, #0
 80003c6:	4d0a      	ldr	r5, [pc, #40]	@ (80003f0 <__libc_init_array+0x40>)
 80003c8:	4c0a      	ldr	r4, [pc, #40]	@ (80003f4 <__libc_init_array+0x44>)
 80003ca:	1b64      	subs	r4, r4, r5
 80003cc:	10a4      	asrs	r4, r4, #2
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
